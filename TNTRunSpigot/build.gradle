plugins {
    id 'java'
}

group = 'org.gabo6480'
version = '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url "https://libraries.minecraft.net"
    }
}

dependencies {
    compileOnly "org.spigotmc:spigot:1.20.1-R0.1-SNAPSHOT"
    implementation project(":Common")
    implementation 'org.jetbrains:annotations:24.0.0'
    compileOnly  'org.projectlombok:lombok:1.18.34'
    annotationProcessor  'org.projectlombok:lombok:1.18.34'


    implementation 'org.xerial:sqlite-jdbc:3.42.0.0'
    implementation 'org.hibernate.orm:hibernate-core:6.6.1.Final'
    implementation 'org.hibernate.orm:hibernate-community-dialects:6.6.1.Final'
    implementation 'jakarta.data:jakarta.data-api:1.0.1'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.6.1.Final'

    //implementation 'com.mojang:brigadier:1.0.18'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.register('copyJar') {
    copy {
        from "build\\libs\\TNTRunSpigot-" + version + ".jar"
        into "./.server/plugins"
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes "Main-Class": "TNTRunSpigot"
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}
